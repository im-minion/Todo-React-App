{"version":3,"sources":["TodoAddItem.js","TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["TodoAddItem","items","setter","useState","todoItem","setTodoItem","type","placeholder","value","onChange","event","target","disabled","onClick","temp","push","localStorage","setItem","TodoContainer","handleClick","index","splice","map","item","key","className","App","exisitngTodos","getItem","split","data","setData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RA0BeA,MAxBf,YAAyC,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OAAU,EAEJC,mBAAS,IAFL,mBAE7BC,EAF6B,KAEnBC,EAFmB,KAapC,OACI,6BACI,2BAAOC,KAAK,OAAOC,YAAY,oBAAoBC,MAAOJ,EAAUK,SAAU,SAACC,GAAD,OAAWL,EAAYK,EAAMC,OAAOH,UAClH,4BAAQI,UAAU,EACdC,QAbZ,WACI,IAAIC,EAAI,YAAOb,GACfa,EAAKC,KAAKX,GACVF,EAAOY,GACPE,aAAaC,QAAQ,OAAQH,GAC7BT,EAAY,MAOR,S,MCSGa,MAxBf,YAA2C,IAAlBjB,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OAE5B,SAASiB,EAAYT,GACjB,IAAMU,EAAQV,EAAMC,OAAOH,MACvBM,EAAI,YAAOb,GACfa,EAAKO,OAAOD,EAAO,GACnBlB,EAAOY,GACPE,aAAaC,QAAQ,OAAQH,GAGjC,OACI,6BAEQb,EAAMqB,KAAI,SAACC,EAAMH,GAAP,OACN,yBAAKI,IAAKJ,EAAOK,UAAU,cACvB,8BAAQF,GACR,4BAAQf,MAAOY,EAAOP,QAASM,GAA/B,gBCITO,MAlBf,WACE,IAAIC,EAAgB,GAChBX,aAAaY,QAAQ,UACvBD,EAAgBX,aAAaY,QAAQ,QAAQC,MAAM,MAHxC,MAKW1B,mBAASwB,GALpB,mBAKNG,EALM,KAKAC,EALA,KAMb,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,kBAAC,EAAD,CAAaxB,MAAO6B,EAAM5B,OAAQ6B,IAClC,kBAAC,EAAD,CAAe9B,MAAO6B,EAAM5B,OAAQ6B,QCJ1BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.678953a2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction TodoAddItem({ items, setter }) {\r\n\r\n    const [todoItem, setTodoItem] = useState('');\r\n\r\n    function handleClick() {\r\n        let temp = [...items];\r\n        temp.push(todoItem);\r\n        setter(temp);\r\n        localStorage.setItem('data', temp);\r\n        setTodoItem('');\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" placeholder=\"Enter Item To add\" value={todoItem} onChange={(event) => setTodoItem(event.target.value)} />\r\n            <button disabled={false}\r\n                onClick={handleClick}>\r\n                Add\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoAddItem;","import React from 'react';\r\nimport './Todo.css'\r\n\r\nfunction TodoContainer({ items, setter }) {\r\n\r\n    function handleClick(event) {\r\n        const index = event.target.value;\r\n        let temp = [...items];\r\n        temp.splice(index, 1);\r\n        setter(temp);\r\n        localStorage.setItem('data', temp);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                items.map((item, index) => (\r\n                    <div key={index} className=\"item-style\">\r\n                        <span >{item}</span>\r\n                        <button value={index} onClick={handleClick}>Delete</button>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoContainer;","import React, { useState } from 'react';\nimport './App.css';\nimport TodoAddItem from './TodoAddItem';\nimport TodoContainer from './TodoContainer';\n\nfunction App() {\n  let exisitngTodos = [];\n  if (localStorage.getItem('data')) {\n    exisitngTodos = localStorage.getItem('data').split(',');\n  }\n  const [data, setData] = useState(exisitngTodos);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <TodoAddItem items={data} setter={setData} />\n          <TodoContainer items={data} setter={setData} />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}